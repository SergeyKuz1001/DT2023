\import Data.Bool
\import Data.List
\import Logic
\import Meta
\import Paths
\import lect05 (funExt, unext)
\import lect06 (Decide, no, yes)
\import lect10

-- 1. Пусть f : A -> B и g : B -> C ─ некоторые функции.
--    Докажите, что если f и g инъективны, то g `o` f также инъективна.
--    Докажите, что если g `o` f инъективна, то f также инъективна.

-- Композиция функций
\func \fixr 9 o {A B C : \Type} (g : B -> C) (f : A -> B) => \lam a => g (f a)

\func o-inj {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj f) (q : isInj g) : isInj (g `o` f)
  => \lam r => p (q r)

\func o-inj' {A B C : \Type} (f : A -> B) (g : B -> C) (p : isInj (g `o` f)) : isInj f
  => \lam r => p (pmap g r)

-- 2. Определите предикат "делится на 3 или на 5" так, чтобы он возвращал утверждения.
--    Докажите, что MultipleOf3Or5 вкладывается в ℕ.

\func Nat-isSet : isSet Nat => setLem (==) ==-isProp n==n ==->=
  \where {
    \data \infix 4 == (n m : Nat) \with
      | 0, 0 => z==z
      | suc n, suc m => s==s (n == m)
    \func n==n (n : Nat) : n == n \elim n
      | 0 => z==z
      | suc n => s==s (n==n n)
    \func ==-isProp (n m : Nat) : isProp (n == m) \elim n, m
      | 0, 0 => \lam p q => cases (p, q) \with { | z==z, z==z => idp }
      | 0, suc m => \lam p q => cases (p, q)
      | suc n, 0 => \lam p q => cases (p, q)
      | suc n, suc m => \lam p q => cases (p, q) \with { | s==s p', s==s q' => pmap s==s (==-isProp n m p' q') }
    \func ==->= {n m : Nat} (p : n == m) : n = m \elim n, m, p
      | 0, 0, z==z => idp
      | suc n, suc m, s==s p => pmap suc (==->= p)
  }

\func Not-isProp {A : \Type} : isProp (Not A) => \lam f g => funExt (\lam a => Empty-isProp (f a) (g a))

\func isMultipleOf3Or5 (n : Nat) : \Type => Or (mod3 n = 0) (\Sigma (mod3 n /= 0) (mod5 n = 0))

\func isMultipleOf3Or5-isProp (n : Nat) : isProp (isMultipleOf3Or5 n)
  => \lam x y => cases (x, y) \with {
    | inl m3x, inl m3y => pmap inl (Nat-isSet (mod3 n) 0 m3x m3y)
    | inl m3x, inr m5y => \case m5y.1 m3x
    | inr m5x, inl m3y => \case m5x.1 m3y
    | inr m5x, inr m5y => pmap inr ((Sigma-isProp Not-isProp (Nat-isSet (mod5 n) 0)) m5x m5y)
  }

\func MultipleOf3Or5 => \Sigma (n : Nat) (isMultipleOf3Or5 n)

\func Mul-inc (m : MultipleOf3Or5) => m.1

\func Mul-inc-isInj : isInj Mul-inc => \lam {x} {y} p => sigmaEq p (isMultipleOf3Or5-isProp y.1 (transport (\lam w => Or (mod3 w = 0) (\Sigma (mod3 w /= 0) (mod5 w = 0))) p x.2) y.2)

-- 3. Мы будем говорить, что тип A тривиален, если существует элемент в A, такой что любой другой элемент в A равен ему.
--    Докажите, что тип A тривиален тогда и только тогда, когда A является утверждением и A населен.

\func isTriv (A : \Type) => \Sigma (a : A) (\Pi (a' : A) -> a = a')

\func \infix 1 <-> (A B : \Type) => \Sigma (A -> B) (B -> A)

\func isTriv-lem (A : \Type) : isTriv A <-> (\Sigma (isProp A) A)
  => (\lam t => (\lam x y => inv (t.2 x) *> t.2 y, t.1), \lam pa => (pa.2, pa.1 pa.2))

-- 4. Докажите, что Either не является утверждением в общем случаем.

\func Either-isProp (p : \Pi {A B : \Type} (pA : isProp A) (pB : isProp B) -> isProp (Or A B)) : Empty => \case p Unit-isProp Unit-isProp (inl ()) (inr ())

-- 5. Докажите, что LessOrEq является предикатом.

\data LessOrEq (n m : Nat) : \Set0 \with
  | 0, m => z<=n
  | suc n, suc m => s<=s (LessOrEq n m)

\func LessOrEq-isProp {n m : Nat} : isProp (LessOrEq n m) \elim n
  | 0 => \lam p q => cases (m, p, q) \with { | _, z<=n, z<=n => idp }
  | suc _ => \lam p q => cases (m, p, q) \with { | suc _, s<=s p, s<=s q => pmap s<=s (LessOrEq-isProp p q) }

-- 6. Докажте, что ReflClosure LessOrEq не является предикатом, а ReflClosure (\lam x y => T (x < y)) является.

\func \infix 4 < (n m : Nat) : Bool
  | _, 0 => false
  | 0, suc _ => true
  | suc n, suc m => n < m

\data ReflClosure (R : Nat -> Nat -> \Type) (x y : Nat)
  | refl (x = y)
  | inc (R x y)

\func ReflClosure_<-isProp (n m : Nat) : isProp (ReflClosure (\lam x y => So (x < y)) n m) \elim n
  | 0 => \lam p q => cases (m, p, q) \with {
    | 0, refl p1, refl p2 => pmap refl (Nat-isSet 0 0 p1 p2)
    | 0, refl p1, inc r2 => \case r2
    | 0, inc r1, refl p2 => \case r1
    | 0, inc r1, inc r2 => \case r1
    | suc _, refl p1, refl p2 => \case p1
    | suc _, refl p1, inc r2 => \case p1
    | suc _, inc r1, refl p2 => \case p2
    | suc _, inc r1, inc r2 => pmap inc So-lem
  }
  | suc n => \lam p q => cases (m, p, q) \with {
    | 0, refl p1, refl p2 => \case p1
    | 0, refl p1, inc r2 => \case r2
    | 0, inc r1, refl p2 => \case r1
    | 0, inc r1, inc r2 => \case r1
    | suc m, refl p1, refl p2 => pmap refl (Nat-isSet (suc n) (suc m) p1 p2)
    | suc m, refl p1, inc r2 => \case transport So (lem1 (pmap pred p1)) r2
    | suc m, inc r1, refl p2 => \case transport So (lem1 (pmap pred p2)) r1
    | suc m, inc r1, inc r2 => pmap lem2 (ReflClosure_<-isProp n m (inc r1) (inc r2))
  }
  \where {
    \func pred (n : Nat) : Nat \elim n
      | 0 => 0
      | suc n => n
    \func lem1 {n m : Nat} (q : n = m) : n < m = false \elim n, m, q
      | 0, 0, q => idp
      | suc n, suc m, q => lem1 {n} {m} (pmap pred q)
    \func lem2 {n m : Nat} (rc : ReflClosure (\lam (x : Nat) (y : Nat) => So (x < y)) n m) : ReflClosure (\lam (x : Nat) (y : Nat) => So (x < y)) (suc n) (suc m) \elim rc
      | refl p => refl (pmap suc p)
      | inc r' => inc r'
  }

\func ReflClosure_<=-isNotProp (p : \Pi (n m : Nat) -> isProp (ReflClosure LessOrEq n m)) : Empty => \case p 0 0 (inc z<=n) (refl idp)

-- 7. Докажите, что если тип A вкладывается в тип B и B является утверждением, то и A является утверждением.

\func sub-isProp {A B : \Type} (f : A -> B) (p : isInj f) (q : isProp B) : isProp A => \lam a a' => p (q (f a) (f a'))

-- 8. Докажите, что тип с разрешимым равенством являетя множеством.

\func Dec-isSet {A : \Type} (dec : \Pi (x y : A) -> Decide (x = y)) : isSet A
  => setLem
    (\lam x y => cases (dec x y) \with { | yes q => \Sigma | no nq => Empty })
    (\lam x y => mcases \with { | yes q => Unit-isProp | no nq => Empty-isProp })
    (\lam x => mcases \with { | yes q => () | no nq => nq idp })
    (\lam {x} {y} r => cases (dec x y, r) \with { | yes q, r => q | no nq, r => \case r })

-- 9. Если A и B являются множествами, то A `Or` B тоже является множеством.

\data \fixr 2 Or (A B : \Type)
  | inl A
  | inr B

\func or-isSet {A B : \Type} (ais : isSet A) (bis : isSet B) : isSet (Or A B)
  => setLem
    (=|=)
    (=|=-isProp ais bis)
    x=|=x
    =|=->=
  \where {
    \data \infix 4 =|= {A B : \Type} (x y : Or A B) \with
      | inl ax, inl ay => inl=|=inl (ax = ay)
      | inr bx, inr by => inr=|=inr (bx = by)
    \func x=|=x {A B : \Type} (x : Or A B) : x =|= x \elim x
      | inl a => inl=|=inl idp
      | inr b => inr=|=inr idp
    \func =|=-isProp {A B : \Type} (ais : isSet A) (bis : isSet B) (x y : Or A B) : isProp (x =|= y) \elim x, y
      | inl ax, inl ay => \lam p q => cases (p, q) \with { | inl=|=inl p', inl=|=inl q' => pmap inl=|=inl (ais ax ay p' q') }
      | inl ax, inr by => \lam p q => cases (p, q)
      | inr bx, inl ay => \lam p q => cases (p, q)
      | inr bx, inr by => \lam p q => cases (p, q) \with { | inr=|=inr p', inr=|=inr q' => pmap inr=|=inr (bis bx by p' q') }
    \func =|=->= {A B : \Type} {x y : Or A B} (p : x =|= y) : x = y \elim x, y, p
      | inl ax, inl ay, inl=|=inl p => pmap inl p
      | inr bx, inr by, inr=|=inr p => pmap inr p
  }

-- 10. Если B x является множеством, то \Pi (x : A) -> B x тоже является множеством.

\func pi-isSet {A : \Type} (B : A -> \Type) (bxis : \Pi (x : A) -> isSet (B x)) : isSet (\Pi (x : A) -> B x)
  => setLem
    (\lam (x y : \Pi (a : A) -> B a) => \Pi (a : A) -> x a = y a)
    (\lam (x y : \Pi (a : A) -> B a) => forall-isProp (\lam a => x a = y a) (\lam a => bxis a (x a) (y a)))
    (\lam (x : \Pi (a : A) -> B a) _ => idp)
    (\lam {x y : \Pi (a : A) -> B a} r => funExt r)

-- 11. Докажите, что если A является множеством, то List A также им является.

\func List-isSet {A : \Type} (pA : isSet A) : isSet (List A)
  => setLem
    (===)
    (===-isProp pA)
    xs===xs
    ===->=
  \where {
    \data \infix 4 === {A : \Type} (xs ys : List A) \elim xs, ys
      | nil, nil => nil===nil
      | :: x xs, :: y ys => cons===cons (x = y) (xs === ys)
    \func xs===xs {A : \Type} (xs : List A) : xs === xs \elim xs
      | nil => nil===nil
      | :: x xs => cons===cons idp (xs===xs xs)
    \func ===-isProp {A : \Type} (ais : isSet A) (xs ys : List A) : isProp (xs === ys) \elim xs, ys
      | nil, nil => \lam p q => cases (p, q) \with { | nil===nil, nil===nil => idp }
      | nil, :: y ys => \lam p q => cases (p, q)
      | :: x xs, nil => \lam p q => cases (p, q)
      | :: x xs, :: y ys => \lam p q => cases (p, q) \with { | cons===cons qp p', cons===cons qq q' => pmap2 cons===cons (ais x y qp qq) (===-isProp ais xs ys p' q') }
    \func ===->= {A : \Type} {xs ys : List A} (p : xs === ys) : xs = ys \elim xs, ys, p
      | nil, nil, nil===nil => idp
      | :: x xs, :: y ys, cons===cons q p => pmap2 (::) q (===->= p)
  }

-- Optional:
-- 12. Докажите, что n-типы замкнуты относительно образования \Pi-типов.
--     Hint: Доказательство по индукции. Для случая suc n нужно доказать, что если f,g : \Pi (x : A) -> B x, то f = g эквивалентно \Pi (x : A) -> f x = g x.

\func levelPi {A : \Type} (B : A -> \Type) (n : Nat) (p : \Pi (x : A) -> B x `hasLevel` n) : (\Pi (x : A) -> B x) `hasLevel` n => {?}