-- 1. Установите arend, следуя инструкциям на странице https://arend-lang.github.io/download
--    В IDEA можно просто импортировать данный проект.

-- 2. Определите аналоги следующих функций на языке хаскелл.
{- Haskell:
   second :: Nat -> Nat -> Nat -> Nat
   second _ y _ = y

   apply :: (Nat -> Nat) -> Nat -> Nat
   apply f x = f x

   compose :: (Nat -> Nat) -> (Nat -> Nat) -> Nat -> Nat
   compose f g x = f (g x)

   flip :: (Nat -> Nat -> Nat) -> Nat -> Nat -> Nat
   flip f x y = f y x

   second' = flip (second 0)
-}

\func second (_ y _ : Nat) => y

\func apply (f : Nat -> Nat) (x : Nat) => f x

\func compose (f g : Nat -> Nat) (x : Nat) => f (g x)

\func flip (f : Nat -> Nat -> Nat) (x y : Nat) => f y x

\func second' => flip (second 0)

-- 3. Расставьте приоритеты функций f1, f2, f3, f4, f5 и f6 так, чтобы функция test проходила тайпчекинг.

\import lect01 \hiding (+,*)

\func f1 (x y : Nat) => x
\func f2 : Nat => 0
\func \infix 8 f3 (f : Nat -> Nat) (z : Nat) : Int => 0
\func f4 : Nat => 0
\func \infix 9 f5 => f1
\func f6 => f4

\func test => f1 f2 f3 f4 f5 f6

-- 4. Определите функцию if, аналогичную следующей функции:
{- Haskell:
   if :: Bool -> Bool -> Bool -> Bool
   if True t _ = t
   if False _ e = e
-}

\func ifM (b t e : Bool) : Bool \elim b
  | true  => t
  | false => e

-- 5. Определите || через if.

\func \infixr 2 || (x y : Bool) : Bool => ifM x true y

\func ||test1 : false || false = false => idp
\func ||test2 : false || true  = true  => idp
\func ||test3 : true  || false = true  => idp
\func ||test4 : true  || true  = true  => idp

-- 6. Определите возведение в степень и факториал для натуральных чисел.

\open Nat \hiding (-,div) -- Здесь лежат + и *.

\func \infixr 8 ^ (x y : Nat) : Nat \elim y
  | 0 => 1
  | suc (y') => x * (x ^ y')

\func ^test1 : 4 ^ 3 = 64 => idp
\func ^test2 : 3 ^ 4 = 81 => idp
\func ^test3 : 5 ^ 0 = 1  => idp
\func ^test4 : 0 ^ 5 = 0  => idp

\func fac (x : Nat) : Nat
  | 0 => 1
  | suc x' => suc x' * fac x'

\func factest1 : fac 0 = 1   => idp
\func factest2 : fac 1 = 1   => idp
\func factest3 : fac 2 = 2   => idp
\func factest4 : fac 3 = 6   => idp
\func factest5 : fac 4 = 24  => idp
\func factest6 : fac 5 = 120 => idp

-- 7. Определите mod и gcd.

\func mod (x y : Nat) : Nat \elim y
  | 0 => 0
  | suc y' => \case go 0 x y' \with {
      | 0 => 0
      | r => suc (y' - r)
    } \where
        \func go (z x y : Nat) : Nat \elim x
          | 0 => z
          | suc x' => go (\case z \with { | 0 => y | suc z' => z' }) x' y

\func modtest1 : mod 4 15 = 4 => idp
\func modtest2 : mod 15 4 = 3 => idp

\func gcd (x y : Nat) : Nat => go (x + y) x y
  \where
    \func go (z x y : Nat) : Nat \elim z
      | 0 => 0
      | suc z' => \case x \with {
          | 0 => y
          | x => go z' (mod y x) x
        }

\func gcdtest1 : gcd 3 82 = 1 => idp
\func gcdtest2 : gcd 6 14 = 2 => idp
\func gcdtest3 : gcd 15 5 = 5 => idp
\func gcdtest4 : gcd 72 54 = 18 => idp
\func gcdtest5 : gcd 81 36 = 9 => idp
